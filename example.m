
% c=[1 1 2 0]
% c=dec2bin(c)'
% a(i)=circshift(a(i-1)',-1)';  循环左移
% c=[1 2 4 8]
% c=dec2bin(c,8)

% a=zeros(8,8)
% a(1,:)=double(dec2bin(1,8))-'0'  

% p1=50;
% p=dec2bin(p1,8);
% %p=dec2bin(p1)位数不对
% p_1=zeros(1,8)
% p_1=double(p)-'0'


%字符串
%A=[0 1 1 0 ;1 0 0 0;]
%bin2dec(num2str(A(1,:)))
%%%

% 右移
% A=[1,2,3,4,65,6]
% m=length(A)
% B=zeros(1,m)
% B(2:end)=A(1:(end-1))

%左移
% A=[1,2,3,4,65,6]
% m=length(A)
% B=zeros(1,m)
% n=2
% B(1:end-n)=A(n+1:end)

% 与操作
% a=[0 0 1 1]
% b=[1 1 0 1]
% c=a&b

%左移―问题点―1000 1011
% A=[1 0 0 0 1 0 1 1]
% m=length(A);
% B=zeros(1,m);
% n=2;
% B(1:end-n)=A(n+1:end);
% %B(end-n:end)=0;错误
% B(end-n+1:end)=0;
% B

% a=[1 0 0;0 1 0;0 0 1];
% mulRANK(a)
% rank(a)

%有限域查表操作
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%length(LOG_TABLE) %256
% LOG_TABLE=[ -1,    0,    1,   25,    2,   50,   26,  198,...
%             3,  223,   51,  238,   27,  104,  199,   75,...
%             4,  100,  224,   14,   52,  141,  239,  129,...
%             28,  193,  105,  248,  200,    8,   76,  113,...
%             5,  138,  101,   47,  225,   36,   15,   33,...
%             53,  147,  142,  218,  240,   18,  130,   69,...
%             29,  181,  194,  125,  106,   39,  249,  185,...
%             201,  154,    9,  120,   77,  228,  114,  166,...
%             6,  191,  139,   98,  102,  221,   48,  253,...
%             226,  152,   37,  179,   16,  145,   34,  136,...
%             54,  208,  148,  206,  143,  150,  219,  189,...
%             241,  210,   19,   92,  131,   56,   70,   64,...
%             30,   66,  182,  163,  195,   72,  126,  110,...
%             107,   58,   40,   84,  250,  133,  186,   61,...
%             202,   94,  155,  159,   10,   21,  121,   43,...
%             78,  212,  229,  172,  115,  243,  167,   87,...
%             7,  112,  192,  247,  140,  128,   99,   13,...
%             103,   74,  222,  237,   49,  197,  254,   24,...
%             227,  165,  153,  119,   38,  184,  180,  124,...
%             17,   68,  146,  217,   35,   32,  137,   46,...
%             55,   63,  209,   91,  149,  188,  207,  205,...
%             144,  135,  151,  178,  220,  252,  190,   97,...
%             242,   86,  211,  171,   20,   42,   93,  158,...
%             132,   60,   57,   83,   71,  109,   65,  162,...
%             31,   45,   67,  216,  183,  123,  164,  118,...
%             196,   23,   73,  236,  127,   12,  111,  246,...
%             108,  161,   59,   82,   41,  157,   85,  170,...
%             251,   96,  134,  177,  187,  204,   62,   90,...
%             203,   89,   95,  176,  156,  169,  160,   81,...
%             11,  245,   22,  235,  122,  117,   44,  215,...
%             79,  174,  213,  233,  230,  231,  173,  232,...
%             116,  214,  244,  234,  168,   80,   88,  175];
%         
% EXP_TABLE =[1,    2,    4,    8,   16,   32,   64, -128,...
%             29,   58,  116,  -24,  -51, -121,   19,   38,...
%             76, -104,   45,   90,  -76,  117,  -22,  -55,...
%             -113,    3,    6,   12,   24,   48,   96,  -64,...
%             -99,   39,   78, -100,   37,   74, -108,   53,...
%             106,  -44,  -75,  119,  -18,  -63,  -97,   35,...
%             70, -116,    5,   10,   20,   40,   80,  -96,...
%             93,  -70,  105,  -46,  -71,  111,  -34,  -95,...
%             95,  -66,   97,  -62, -103,   47,   94,  -68,...
%             101,  -54, -119,   15,   30,   60,  120,  -16,...
%             -3,  -25,  -45,  -69,  107,  -42,  -79,  127,...
%             -2,  -31,  -33,  -93,   91,  -74,  113,  -30,...
%             -39,  -81,   67, -122,   17,   34,   68, -120,...
%             13,   26,   52,  104,  -48,  -67,  103,  -50,...
%             -127,   31,   62,  124,   -8,  -19,  -57, -109,...
%             59,  118,  -20,  -59, -105,   51,  102,  -52,...
%             -123,   23,   46,   92,  -72,  109,  -38,  -87,...
%             79,  -98,   33,   66, -124,   21,   42,   84,...
%             -88,   77, -102,   41,   82,  -92,   85,  -86,...
%             73, -110,   57,  114,  -28,  -43,  -73,  115,...
%             -26,  -47,  -65,   99,  -58, -111,   63,  126,...
%             -4,  -27,  -41,  -77,  123,  -10,  -15,   -1,...
%             -29,  -37,  -85,   75, -106,   49,   98,  -60,...
%             -107,   55,  110,  -36,  -91,   87,  -82,   65,...
%             -126,   25,   50,  100,  -56, -115,    7,   14,...
%             28,   56,  112,  -32,  -35,  -89,   83,  -90,...
%             81,  -94,   89,  -78,  121,  -14,   -7,  -17,...
%             -61, -101,   43,   86,  -84,   69, -118,    9,...
%             18,   36,   72, -112,   61,  122,  -12,  -11,...
%             -9,  -13,   -5,  -21,  -53, -117,   11,   22,...
%             44,   88,  -80,  125,   -6,  -23,  -49, -125,...
%             27,   54,  108,  -40,  -83,   71, -114,...      
%             1,    2,    4,    8,   16,   32,   64, -128,...  % Repeat the table a second time, so multiply()
%             29,   58,  116,  -24,  -51, -121,   19,   38,... % does not have to check bounds.
%             76, -104,   45,   90,  -76,  117,  -22,  -55,...
%             -113,    3,    6,   12,   24,   48,   96,  -64,...
%             -99,   39,   78, -100,   37,   74, -108,   53,...
%             106,  -44,  -75,  119,  -18,  -63,  -97,   35,...
%             70, -116,    5,   10,   20,   40,   80,  -96,...
%             93,  -70,  105,  -46,  -71,  111,  -34,  -95,...
%             95,  -66,   97,  -62, -103,   47,   94,  -68,...
%             101,  -54, -119,   15,   30,   60,  120,  -16,...
%             -3,  -25,  -45,  -69,  107,  -42,  -79,  127,...
%             -2,  -31,  -33,  -93,   91,  -74,  113,  -30,...
%             -39,  -81,   67, -122,   17,   34,   68, -120,...
%             13,   26,   52,  104,  -48,  -67,  103,  -50,...
%             -127,   31,   62,  124,   -8,  -19,  -57, -109,...
%             59,  118,  -20,  -59, -105,   51,  102,  -52,...
%             -123,   23,   46,   92,  -72,  109,  -38,  -87,...
%             79,  -98,   33,   66, -124,   21,   42,   84,...
%             -88,   77, -102,   41,   82,  -92,   85,  -86,...
%             73, -110,   57,  114,  -28,  -43,  -73,  115,...
%             -26,  -47,  -65,   99,  -58, -111,   63,  126,...
%             -4,  -27,  -41,  -77,  123,  -10,  -15,   -1,...
%             -29,  -37,  -85,   75, -106,   49,   98,  -60,...
%             -107,   55,  110,  -36,  -91,   87,  -82,   65,...
%             -126,   25,   50,  100,  -56, -115,    7,   14,...
%             28,   56,  112,  -32,  -35,  -89,   83,  -90,...
%             81,  -94,   89,  -78,  121,  -14,   -7,  -17,...
%             -61, -101,   43,   86,  -84,   69, -118,    9,...
%             18,   36,   72, -112,   61,  122,  -12,  -11,...
%             -9,  -13,   -5,  -21,  -53, -117,   11,   22,...
%             44,   88,  -80,  125,   -6,  -23,  -49, -125,...
%             27,   54,  108,  -40,  -83,   71, -114];
%  %a1=dec2binPN(-5,8)
%  c=uint8(hex2dec('FF'));
%  bitandPN(-5,c);
%  logA=LOG_TABLE(bitandPN(1,c)+1);
%  logB=LOG_TABLE(bitandPN(2,c)+1);
%  disp(logA);
%  disp(logB);
%  logResult = logA-logB+1;
%  EXP_TABLE(logResult);
%  disp('*****************');
%  disp(c);
%  disp(logA);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
%组合测试
% B = (-127:128);
% set = nchoosek(B,2);
% a = size(set,1); %返回矩阵的行数
% countNUM = 0;
% disp(set(1,:));
 
%break continue 测试
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for i=0:8
%     if i==5
%        %continue; %输出的是0 1 2 3 4 6 7 8
%        break;     %输出的是0 1 2 3 4
%     end
%     disp(i);    
% end
%
% for i=0:3
%     for j=1:3
%         if i==1 && j==1
%             continue;   %跳出内循环的当前值
%             %break;     %当是当前值时是跳出内循环外循环接着进行
%         end
%     disp('***内循环i'); % continue 结果 0 0 0  1 1   2 2 2  3 3 3
%     disp(i);            % break    结果 0 0 0        2 2 2  3 3 3
%     end
%     disp('外循环i');    % continue 结果 0      1     2      3
%     disp(i);            % break    结果 0      1     2      3
% end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%高斯消去测试
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% a=[1 1 0;1 2 0;1 2 5];
% mulRANK(a)
% % r1=1;
% % r2=3;
% m=size(a,1);   %a_row
% n=size(a,2);    %a_column
% temp=a(r1,:);
% a(r1,:)=a(r2,:);
% a(r2,:)=temp;
% a
% a1=swapRows(a,1,2);
% disp(a1);
%
% for r=1:m
%     %对角搞不不为0，进行换行实现
%     if(a(r,r)==0)
%        for rowBelow=r+1:m
%            if a(rowBelow,r)~=0
%               temp=a(r,:);
%               a(r,:)=a(rowBelow,:);
%               a(rowBelow,:)=temp;
%               break;
%            end
%        end
%     end
%     %下行 找不到中间元素不为0的行
%     if(a(r,r)==0)
%        disp('矩阵是奇异的即是不满秩');
%     end
%     
%     %对角元素至1 （scale to 1）
%     if(a(r,r)~=1)
%        Spart=divide(1,a(r,r));
%        for c=1:n
%            a(r,c)=multipy(a(r,c),Spart);
%        end
%     end
%     
%     %对角元素 列对应下三角元素置0  r+1:m  1:n(11 21 31)
%     for rowBelow=r+1:m
%         if a(rowBelow,r)~=0
%            backup=a(rowBelow,r);
%            for c=1:n
%                a(rowBelow,c)=bitxorPN(a(rowBelow,c),multipy(backup,a(r,c)));
%            end
%         end
%     end 
% end
%
%    %% 对角元素 列对应上三角元素置0   1:d  1:m(11 12 13)
% for d=1:m
%        for rowAbove=1:d-1
%            if(a(rowAbove,d)~=0)
%               backup=a(rowAbove,d);
%               for c=1:n
%                   a(rowAbove,c)=bitxorPN(a(rowAbove,c),multipy(backup,a(d,c)));
%               end
%            end
%        end 
% end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%p参数满足MDS属性的确认
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% clc;
% clear;
% A=zeros(10,14);
% for i=1:10
%    A(i,i)=1;
% end
% p=[11,21,31,41,55,61,71,81,91,101]; %%p1^2到p10^2 mod q 成立
% %p=[11,23,31,41,55,61,71,81,91,101]; %成立
% for j=1:10
%    double(j) =multipy(p(j),p(j)) ;
%    three(j) = multipy(double(j),p(j));
% %    double(j) =p(j)*p(j) ;
% %    three(j) = double(j)*p(j);
% end
%         PP=zeros(4,10);
%         PP(1,:)=1;
%         PP(2,:)=p;
%         PP(3,:)=double;
%         PP(4,:)=three;
%         % 最后20*21_28矩阵填充 (11 12 13 14节点的填充)
%            for num=1:4
%              for i=1:10
%                A(i,11+(num-1))=PP(num,i);
%              end
%            end
%         k=10;
%         H=zeros(10,10);       
%         combos = nchoosek(1:14,10);%和排序位置无关，挑出编码矩阵看是否可逆
%         sizeofcom = size(combos,1);
%         booleanH = 1;
%         for i1 = 1:sizeofcom
%             tempcom = combos(i1,:);
%             for i2 = 1:k
%                 H(:,i2) = A(:,tempcom(i2));
%             end
%             rankofH = mulRANK(H);
%             if rankofH ~= k
%                 booleanH = 0;
%                 disp(i1);
%                 disp(tempcom);
%                 break;
%             end
%         end
%         if booleanH == 1
%             disp('*****************');
%             break;
%         end
%         
%         H1=zeros(4,4);
%         tempcom1=[11 12 13 14];
%         for i2 = 1:4
%             H1(1:4,i2) = A(1:4,tempcom1(i2));
%         end
%         RANK1=mulRANK(H1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%前2个参数的选择 E1-E2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%n=14 k=10 d=11 r=4 前四列线性变换（第一次变换，二个子分包）每个节点2个元素
%%%2*10__2*14  即是20*28矩阵填充测试
%%%上一步确认的组合 p=[11,21,31,41,55,61,71,81,91,101]; 
% clc;
% clear;
% e1=87;                                           %87
% e2=77;                                           %77
% p=[11,21,31,41,55,61,71,81,91,101];              %%p1^2到p10^2 mod q
% for j=1:10
%    double(j) =multipy(p(j),p(j)) ;
%    three(j) = multipy(double(j),p(j));
% end
% A=zeros(20,28);      
%         a1=1;b1=1;                                                      
%         e=[e1,e2];
%         for j = 0:1                              %% 前20*8矩阵填充 (前4个节点的填充)
%             a1=a1+2*j;                           %每个线性变换开头元素相差(d-k+1)*j位数   这里d-k+1为2
%             b1=b1+4*j;                           %4=2*2（2个节点*2个子分包）
%             e_1=e(j+1);                           
%             A(a1,b1)=1;
%             A(a1+1,b1+1) = e_1;
%             A(a1+1,b1+2) = 1;
%             A(a1+10,b1+1) = 1;
%             A(a1+10,b1+2) = 1;
%             A(a1+11,b1+3) = 1;
%             a1=1;b1=1; 
%         end
%         % 中20*9_20矩阵填充 (5 6 7 8 9 10节点的填充)
%         a2=5;b2=9;
%         for j = 0:1                            
%             a2=a2+10*j;                          
%             b2=b2+j;                           
%             for i=0:5
%                 A(a2+i,b2+2*i)=1;
%             end
%             a2=5;b2=9;
%         end
%         % 最后20*21_28矩阵填充 (11 12 13 14节点的填充)
%         PP=zeros(4,10);
%         PP(1,:)=1;
%         PP(2,:)=p;
%         PP(3,:)=double;
%         PP(4,:)=three;
%         for j=0:1
%            for num=1:4
%              for i=1:10
%                A(i+j*10,21+j+(num-1)*2)=PP(num,i);
%              end
%            end
%         end
%         
%         k=10;
%         H = zeros(k*2,k*2);
%      
%%%  挑选要遍历的组
%%%%%%%%%%%%%%%%%%%%%%%%
%          %5到14任意选8个节点
%         combos = nchoosek(5:14,8);
%         sizeofcom1 = size(combos,1);
%         %1到6节点选必须要考虑的2个节点组合  有2种情况
%         consider=[1 4;2 3];
%         sizeofcom=2*sizeofcom1;
%         %组成一个新的参数矩阵
%         combos1=zeros(2*sizeofcom1,10);
%         for i=1:2
%             for j=1:sizeofcom1
%                 combos1((i-1)*sizeofcom1+j,1:2)=consider(i,:);
%                 combos1((i-1)*sizeofcom1+j,3:10)= combos(j,:);
%             end
%         end
%         booleanH = 1;
%         for i1 = 1:sizeofcom
%             tempcom = combos1(i1,:);
%             for i2 = 1:k
%                 H(:,2*i2) = A(:,2*tempcom(i2));
%                 H(:,2*i2-1) = A(:,2*tempcom(i2)-1); 
%             end
%             rankofH = mulRANK(H);
%             if rankofH ~= k*2
%                 booleanH = 0;
%                 disp(i1);
%                 disp(tempcom);
%                 break;
%             end
%         end
% %%%%%%%%%%%%%%%%%%%%%% 
% 
% %%%  1：14 选10 所有遍历
% %%%%%%%%%%%%%%%%%%%%%%%
% %         combos = nchoosek(1:14,10);
% %         sizeofcom = size(combos,1);
% %         booleanH = 1;
% %         for i1 = 1:sizeofcom
% %             tempcom = combos(i1,:);
% %             for i2 = 1:k
% %                 H(:,2*i2) = A(:,2*tempcom(i2));
% %                 H(:,2*i2-1) = A(:,2*tempcom(i2)-1); 
% %             end
% %             rankofH = mulRANK(H);
% %             if rankofH ~= k*2
% %                 booleanH = 0;
% %                 disp(i1);
% %                 disp(tempcom);
% %                 break;
% %             end
% %         end
% %%%%%%%%%%%%%%%%%%%%%%%%%
% 
%         if booleanH == 1
%             disp('*****************');
%             disp(p);
%             disp(e1);
%             disp(e2);
%             break;
%         end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%前3个参数
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%上一步成功的一组结果
%%%% e1=87;
%%%%e2=77;
%%%% p=[11,21,31,41,55,61,71,81,91,101];  
%
%%% n=14 k=10 d=11 r=4 前6列线性变换（第一次变换，二个子分包）每个节点2个元素
%%% 2*10__2*14  即是20*28矩阵填充测试
% clc;
% clear;
% e1=87;
% e2=77;
% p=[11,21,31,41,55,61,71,81,91,101];                   %%p1^2到p10^2 mod q
% e3=9;                                                 %%待确定的参数 可行值33，10，15，9
% for j=1:10
%    double(j) =multipy(p(j),p(j)) ;
%    three(j) = multipy(double(j),p(j));
% end
% A=zeros(20,28);      
%         a1=1;b1=1;                                                      
%         e=[e1,e2,e3];
%         for j = 0:2                              %% 前20*12矩阵填充 (前6个节点的填充)
%             a1=a1+2*j;                           %每个线性变换开头元素相差(d-k+1)*j位数   这里d-k+1为2
%             b1=b1+4*j;                           %4=2*2（2个节点*2个子分包）
%             e_1=e(j+1);                           
%             A(a1,b1)=1;
%             A(a1+1,b1+1) = e_1;
%             A(a1+1,b1+2) = 1;
%             A(a1+10,b1+1) = 1;
%             A(a1+10,b1+2) = 1;
%             A(a1+11,b1+3) = 1;
%             a1=1;b1=1; 
%         end
%         % 中20*13_20矩阵填充 (7 8 9 10节点的填充)
%         a2=7;b2=13;
%         for j = 0:1                              %% 前20*12矩阵填充 (前6个节点的填充)
%             a2=a2+10*j;                           %每个线性变换开头元素相差(d-k+1)*j位数   这里d-k+1为2
%             b2=b2+j;                           %4=2*2（2个节点*2个子分包）
%             for i=0:3
%                 A(a2+i,b2+2*i)=1;
%             end
%             a2=7;b2=13;
%         end
%         
%         PP=zeros(4,10);
%         PP(1,:)=1;
%         PP(2,:)=p;
%         PP(3,:)=double;
%         PP(4,:)=three;
%         % 最后20*21_28矩阵填充 (11 12 13 14节点的填充)
%         for j=0:1
%            for num=1:4
%              for i=1:10
%                A(i+j*10,21+j+(num-1)*2)=PP(num,i);
%              end
%            end
%         end
%         k=10;
%         booleanH = 1;
%         
% %%%%挑选要遍历的组 
% %%%%%%%%%%%%%%%%%%%%%%%%%%
%         %7到14任意选6个节点
%         combos = nchoosek(7:14,6);
%         sizeofcom = size(combos,1);
%         %1到6节点选必须要考虑的4个节点组合  有6种情况
%         consider=[2 3 5 6;1 4 5 6;2 5 3 4;1 6 3 4;4 5 1 2;3 6 1 2];
%         %组成一个新的参数矩阵
%         combos1=zeros(6*sizeofcom,10);
%         for i=1:6
%             for j=1:sizeofcom
%                 combos1((i-1)*sizeofcom+j,1:4)=consider(i,:);
%                 combos1((i-1)*sizeofcom+j,5:10)= combos(j,:);
%             end
%         end
%         for i1 = 1:6*sizeofcom
%             tempcom = combos1(i1,:);
%             for i2 = 1:k
%                 H(:,2*i2) = A(:,2*tempcom(i2));
%                 H(:,2*i2-1) = A(:,2*tempcom(i2)-1); 
%             end
%             rankofH = mulRANK(H);
%             if rankofH ~= k*2
%                 booleanH = 0;
%                 disp(i1);
%                 disp(tempcom);
%                 %disp(H);
%                 break;
%             end
%         end
% %%%%%%%%%%%%%%%%%%%%%%%%
%         
% % %%%  1：14 选10 所有遍历 （检查是否直接挑选遍历组即可达到所有遍历的效果）
% %%%%%%%%%%%%%%%%%%%%%%%%
% %         combos = nchoosek(1:14,10);
% %         sizeofcom = size(combos,1);
% %         booleanH = 1;
% %         for i1 = 1:sizeofcom
% %             tempcom = combos(i1,:);
% %             for i2 = 1:k
% %                 H(:,2*i2) = A(:,2*tempcom(i2));
% %                 H(:,2*i2-1) = A(:,2*tempcom(i2)-1); 
% %             end
% %             rankofH = mulRANK(H);
% %             if rankofH ~= k*2
% %                 booleanH = 0;
% %                 disp(i1);
% %                 disp(tempcom);
% %                 break;
% %             end
% %         end
% %%%%%%%%%%%%%%%%%%%%%%%%
%         if booleanH == 1
%             disp('*****************');
%             disp(p);
%             disp(e1);
%             disp(e2);
%             disp(e3);
%             break;
%         end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

%前6个参数的选择
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%n=14 k=10 d=11 r=4 前12列线性变换（第二次变换，四个子分包）每个节点4个元素
%%%4*10__4*14  即是40*56矩阵填充测试
%%%上一步确定的参数
%%%e1=87;
%%%e2=77;
%%%p=[11,21,31,41,55,61,71,81,91,101];                   
%%%e3=10;
% clc;
% clear;
% e1=87;
% e2=77;
% e3=10;
% e4=40;                               %40
% e5=65;                               %65
% e6=78;                               %78
% p=[11,21,31,41,55,61,71,81,91,101];           %%p1^2到p10^2 mod q
% for j=1:10
%    double(j) =multipy(p(j),p(j)) ;
%    three(j) = multipy(double(j),p(j));
%    E6mulp(j)=multipy(p(j),e6);
% end
% A=zeros(40,56);      
%         a1=1;b1=1;                                                      
%         e=[e1,e2,e3,e4,e5,e6];
%         % 前40*24矩阵填充 (前6个节点的填充)  
%         %每个线性变换开头元素相差(d-k+1)*j位数 
%         %8=2*4（2个节点*4个子分包）
%         for c=0:1
%           for j = 0:2                              
%                 a1=a1+2*j;                            
%                 b1=b1+8*j;                          
%                 e_1=e(j+1);                           
%                 A(a1+20*c,b1+2*c)=1;           %20=40/2
%                 A(a1+20*c+1,b1+2*c+1) = e_1;
%                 A(a1+20*c+1,b1+2*c+4) = 1;
%                 A(a1+20*c+10,b1+2*c+1) = 1;
%                 A(a1+20*c+10,b1+2*c+4) = 1;
%                 A(a1+20*c+11,b1+2*c+5) = 1;
%                 a1=1;b1=1; 
%           end
%         end
%         
%       % 中20*24_40矩阵填充 (7 8 9 10节点的填充)
%       a2=7;b2=25;
%       for c=0:1
%           for j = 0:1                              
%                 a2=a2+10*c+2*j;                            
%                 b2=b2+c+8*j;                          
%                 e_1=e(3+j+1);                           
%                 A(a2,b2)=1;             
%                 A(a2+1,b2+2) = e_1;
%                 A(a2+1,b2+4) = 1;
%                 A(a2+20,b2+2) = 1;
%                 A(a2+20,b2+4) = 1;
%                 A(a2+21,b2+6) = 1;
%                 a2=7;b2=25; 
%           end
%       end
%        
%       %末尾20*40_56矩阵填充 (11 12 13 14节点的填充)
%         PP=zeros(5,10);
%         PP(1,:)=1;
%         PP(2,:)=p;
%         PP(3,:)=double;
%         PP(4,:)=three;
%         PP(5,:)=E6mulp;
%         for j=0:3
%            for num=1:4
%              for i=1:10
%                A(i+j*10,41+j+(num-1)*4)=PP(num,i);    
%              end
%            end
%         end
%         
%         for j=0:1
%             for i=1:10
%                 A(i+j*10,43+j)=PP(5,i);
%                 A(i+(j+2)*10,45+j)=PP(1,i);
%             end
%         end
%         
%         k=10;
%         H = zeros(k*4,k*4);
%         booleanH = 1;
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         combos = nchoosek(1:14,10);
%         sizeofcom = size(combos,1);
%         for i1 = 1:sizeofcom
%             tempcom = combos(i1,:);
%             for i2 = 1:k
%                 H(:,4*i2) = A(:,4*tempcom(i2));
%                 H(:,4*i2-1) = A(:,4*tempcom(i2)-1); 
%                 H(:,4*i2-2) = A(:,4*tempcom(i2)-2);
%                 H(:,4*i2-3) = A(:,4*tempcom(i2)-3);
%             end
%             rankofH = mulRANK(H);
%             if rankofH ~= k*4
%                 booleanH = 0;
%                 disp(i1);
%                 disp(tempcom);
%                 break;
%             end
%         end
% %%%%%%%%%%%%%%%%%%%%%%%%%%
%         
% %%%%%%%%%%%%%%%%%%%%%%%%%%
% %         %7到14任意选6个节点
% %         pond=[1 2 3 4 5 6 13 14];       %选择池
% %         combos = nchoosek(pond,6);
% %         sizeofcom = size(combos,1);
% %         %7到12节点选必须要考虑的4个节点组合  有6种情况
% %         consider=[7 8 9 12;7 8 10 11;8 9 11 12;7 10 11 12;8 9 10 11;7 9 10 12];
% %         %组成一个新的参数矩阵
% %         combos1=zeros(6*sizeofcom,10);
% %         for i=1:6
% %             for j=1:sizeofcom
% %                 combos1((i-1)*sizeofcom+j,1:4)=consider(i,:);
% %                 combos1((i-1)*sizeofcom+j,5:10)= combos(j,:);
% %             end
% %         end
% %         for i1 = 1:6*sizeofcom
% %             tempcom = combos1(i1,:);
% %             for i2 = 1:k
% %                 H(:,4*i2) = A(:,4*tempcom(i2));
% %                 H(:,4*i2-1) = A(:,4*tempcom(i2)-1); 
% %                 H(:,4*i2-2) = A(:,4*tempcom(i2)-2);
% %                 H(:,4*i2-3) = A(:,4*tempcom(i2)-3);
% %             end
% %             rankofH = mulRANK(H);
% %             if rankofH ~= k*4
% %                 booleanH = 0;
% %                 disp(i1);
% %                 disp(tempcom);
% %                 break;
% %             end
% %         end
%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         
%         if booleanH == 1
%             disp('*****************');
%             disp(e4);
%             disp(e5);
%             disp(e6);
%             break;
%         end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%所有参数的确定 P1-P10  E1-E7
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc;
clear;
n = 14;  %节点总数
k = 10;  %数据节点的个数
q = 256;   %有限域大小
e1=87;
e2=77;
e3=10;
e4=40;                               %40
e5=65;                               %65
e6=78;                               %78
e7=123;
p=[11,21,31,41,55,61,71,81,91,101];           %%p1^2到p10^2 mod q
for j=1:10
   double(j) =multipy(p(j),p(j)) ;
   three(j) = multipy(double(j),p(j));
   E6mulp(j)=multipy(p(j),e6);
   E7mulp_3(j)=multipy(three(j),e7);
end
A=zeros(80,112);      
        a1=1;b1=1;                                                      
        e=[e1,e2,e3,e4,e5,e6,e7];
        %前80*48矩阵填充 (前6个节点的填充)  
        %每个线性变换开头元素相差(d-k+1)*j位数 
        %16=2*8（2个节点*4个子分包）
        for c=0:3
          for j = 0:2                              
                a1=a1+20*c+2*j;                            
                b1=b1+2*c+16*j;                          
                e_1=e(j+1);                           
                A(a1,b1)=1;           %20=40/2           (1_1)
                A(a1+1,b1+1) = e_1;   %B1加上1, b1加上1 （第一个变换 两行两列线性变换的第二行第一列2_1）
                A(a1+1,b1+8) = 1;     %b1加上子分包数8   (2_1   两个位线性组合)
                A(a1+10,b1+1) = 1;    %B1加上k, b1加上1        （1_2）
                A(a1+10,b1+8) = 1;    %B1加上k, b1加上子分包数8 (1_2)
                A(a1+11,b1+9) = 1;    %B1加上k+1, b1加上子分包数8+1 (2_2)
                a1=1;b1=1; 
          end
        end
        
      % 中80*48_80矩阵填充 (7 8 9 10节点的填充)
      a2=7;b2=49;
      for c=0:1
          for j = 0:1  
                a2=a2+10*c+2*j;                            
                b2=b2+c+16*j;         %子分包*2=8*2=16                    
                e_1=e(3+j+1);                           
                A(a2,b2)=1;             
                A(a2+1,b2+2) = e_1;
                A(a2+1,b2+8) = 1;  
                A(a2+20,b2+2) = 1;
                A(a2+20,b2+8) = 1;
                A(a2+21,b2+10) = 1;
                a2=7;b2=49; 
          end
      end
       a2=47;b2=53;
      for c=0:1
          for j = 0:1  
                a2=a2+10*c+2*j;                            
                b2=b2+c+16*j;         %子分包*2=8*2=16                    
                e_1=e(3+j+1);                           
                A(a2,b2)=1;             
                A(a2+1,b2+2) = e_1;
                A(a2+1,b2+8) = 1;  
                A(a2+20,b2+2) = 1;
                A(a2+20,b2+8) = 1;
                A(a2+21,b2+10) = 1;
                a2=47;b2=53; 
          end
      end
      
      %末尾80*80_112矩阵填充 (11 12 13 14节点的填充)
        PP=zeros(6,10);
        PP(1,:)=1;
        PP(2,:)=p;
        PP(3,:)=double;
        PP(4,:)=three;
        PP(5,:)=E6mulp;
        PP(6,:)=E7mulp_3;
        for j=0:7
           for num=1:4
             for i=1:10
               A(i+j*10,81+j+(num-1)*8)=PP(num,i);    
             end
           end
        end
        %节点11，节点12除对角元素填充
        for j=0:1
            for i=1:10
                A(i+j*10,83+j)=PP(5,i);
                A(i+40+j*10,87+j)=PP(5,i);
                A(i+20+j*10,89+j)=PP(1,i);
                A(i+60+j*10,93+j)=PP(1,i);
            end
        end
        %节点13，节点14除对角元素填充
        for j=0:3
            for i=1:10
                A(i+j*10,101+j)=PP(6,i);  
                A(i+j*10,105+j)=PP(3,i);   
            end
        end
        
       H = zeros(k*8,k*8);
       booleanH = 1;
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         %任意k个节点的组合
%         combos = nchoosek(1:n,k);%和排序位置无关，挑出编码矩阵看是否可逆
%         sizeofcom = size(combos,1);
%         for i1 = 1:sizeofcom
%             tempcom = combos(i1,:);
%             for i2 = 1:k
%                 H(:,8*i2) = A(:,8*tempcom(i2));
%                 H(:,8*i2-1) = A(:,8*tempcom(i2)-1); 
%                 H(:,8*i2-2) = A(:,8*tempcom(i2)-2); 
%                 H(:,8*i2-3) = A(:,8*tempcom(i2)-3); 
%                 H(:,8*i2-4) = A(:,8*tempcom(i2)-4); 
%                 H(:,8*i2-5) = A(:,8*tempcom(i2)-5); 
%                 H(:,8*i2-6) = A(:,8*tempcom(i2)-6); 
%                 H(:,8*i2-7) = A(:,8*tempcom(i2)-7); 
%             end
%             rankofH = mulRANK(H);
%             if rankofH ~= k*8
%                 booleanH = 0;
%                 disp(i1);
%                 disp(tempcom);
%                 break;
%             end
%         end
%%%%%%%%%%%%%%%%%%%%%%%%%%
        
%%%%%%%%%%%%%%%%%%%%%%%%%%
        %1到12任意选9个节点
        combos = nchoosek(1:12,9);
        sizeofcom = size(combos,1);
        %13到14节点选必须要考虑的1个节点组合  有2种情况
        consider=[13;14];
        %组成一个新的参数矩阵
        combos1=zeros(2*sizeofcom,10);
        for i=1:2
            for j=1:sizeofcom
                combos1((i-1)*sizeofcom+j,10)=consider(i,:);
                combos1((i-1)*sizeofcom+j,1:9)= combos(j,:);
            end
        end
         for i1 = 1:2*sizeofcom
            tempcom = combos1(i1,:);
            disp(i1);
            for i2 = 1:k
                H(:,8*i2) = A(:,8*tempcom(i2));
                H(:,8*i2-1) = A(:,8*tempcom(i2)-1); 
                H(:,8*i2-2) = A(:,8*tempcom(i2)-2); 
                H(:,8*i2-3) = A(:,8*tempcom(i2)-3); 
                H(:,8*i2-4) = A(:,8*tempcom(i2)-4); 
                H(:,8*i2-5) = A(:,8*tempcom(i2)-5); 
                H(:,8*i2-6) = A(:,8*tempcom(i2)-6); 
                H(:,8*i2-7) = A(:,8*tempcom(i2)-7); 
            end
            rankofH = mulRANK(H);
            if rankofH ~= k*8
                booleanH = 0;
                disp(i1);
                disp(tempcom);
                break;
            end
        end
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        if booleanH == 1
            disp('*****************');
            disp(e7);
            break;
        end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

